                      WFPadTools Protocol Specification

								Marc Juarez

0. Preliminaries

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in RFC 2119.

1. Overview

    WFPadTools is a pluggable transport protocol for the obfsproxy
    obfuscation framework [1]. It implements the necessary building blocks
    for the development of link padding-based website fingerprinting [2]
    countermeasures in Tor. The protocol allows to insert dummy messages
    (data unit of the WFPadTools) to the stream between the OP and the bridge
    that are discarded at the each of the ends. 

3.  WFPadTools protocol
 
	Application data is transported wrapping them into WFPadTools messages
	which structure is described next. WFPadTools defines two message headers,
	one for data/dummy messages and the other to signal control operations to
	the other end of the transport.
	
	The data/dummy message is depicted below has a 5-byte header and the fields
	of the header are: total length, payload length and flags.
	
			   <-------------------  MTU  ------------------->
			    2 Bytes  2 Bytes  1 Byte  <--- Up to MPU ---->
			  +--------+---------+-------+----------+---------+
			  | Total  | Payload | Flags |  Payload | Padding |
			  | length | length  |       |   (opt)  |  (opt)  |
			  +--------+---------+-------+----------+---------+
			   <------ Min. Header -----> <-- Min. Payload -->
	
	The 2-byte total length refers to the overall length of the message excluding
	the header whereas the 2-byte payload length refers to the payload only. The
	difference between total length and payload length is the length of the payload
	padding that can be used for packet length obfuscation.

	When both fields are set to 0 it results into an empty protocol message.
	Note that the total length can be set to zero and the payload length to
	the total Maximum Payload Unit (MPU) size, which results in a dummy message.
	
	WFPadTools Maximum Transmission Unit (MTU) size is 1448 bytes. Excluding the
	minimum header, this results in 1443 bytes of transported data in data messages.
	
	The other type of message is for control messages and has a longer header that
	allows to specify opcode and arguments of the control operation. The structure
	of the control message is depicted below.
	
			  <-------------------  MTU  ---------------------->
			  5 Bytes  1 Byte   2 Bytes  <----- Up to MPU ----->
			 +--------+---------+-------+--------+--------------+
			 |  Min.  | Opcode  | Args  |  Args  | Min. payload |
			 | Header | length  | len.  |  (opt) |     (opt)    |
			 +--------+---------+-------+--------+--------------+
			  <--------- Header -------> <------ Payload ------>
  
	The 1-byte flag field in the minimum header is used for protocol signaling.
	Below, all defined flags along with their semantics are explained.
	
    Flag name       | Bit # | Description
    ----------------+-------+--------------------------------------------------
    FLAG_DATA	    |   1   | The payload consists of application data which
                    |       | must be forwarded to the application.
    ----------------+-------+--------------------------------------------------
    FLAG_PADDING    |   2   | The payload holds padding that must be discarded.
    ----------------+-------+--------------------------------------------------
    FLAG_CONTROL    |   3   | The payload holds arguments for the control
                    |       | operation and can hold the same payload as 
                    |       | FLAG_DATA and FLAG_PADDING.
    ----------------+-------+--------------------------------------------------
    
    There is a precedence of flags. When FLAG_PADDING is signaled to the other end,
    the message is discarded, ignoring the state of the other flags. When data is
    on, the message is forwarded upstream to the application. If the control message
    flag is set, the transport parses the arguments and the opcode. In case the other
    FLAG_DATA is set, it will relay the payload of the message. If FLAG_PADDING is set,
    it will discard the payload of the message. So, the allowed combinations of flags
    are:
	
	Flag value      | Description
	----------------+-----------------------------------------------------
	   001		    | 
	----------------+-----------------------------------------------------
	   010	        | 
	----------------+-----------------------------------------------------
	   110          |   
	----------------+-----------------------------------------------------
	   101          |   
	----------------+-----------------------------------------------------

	WFPadTools message contains the transported data which might be followed
	by padding. Padding MUST always be discarded.
	
	WFPadTools MUST be used in combination with another pluggable transport that
	provides encryption. Then we can assume that padding is always going to be
	encrypted and client and server MAY simply pad with 0 bytes.

	For the motivation, a protocol overview and the threat model, please refer
	to the Google Summer of Code project proposal [3].
    
    This protocol specification discusses the intention of the padding primitives
    based on [2].
    
4. Handshake

    Client                         Server  Legend:
      |  							 |     T:
      | ---------------------------> |     
      |           					 |     
      | <--------------------------- |     
      |       					     |     
      | <--------------------------> |      
 
References

	[1] https://www.torproject.org/projects/obfsproxy.html.en

	[2]

 	[3] https://gitweb.torproject.org/user/mikeperry/torspec.git/blob/refs/heads/multihop-padding-primitives:/proposals/ideas/xxx-multihop-padding-primitives.txt
 	